<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Cf+2jQz/eEQZMQAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAChYiFUo14Q35FTH1qpYRsqsWcMnKdi
        D3YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASoMYlgCjEv8ApAP/KKII/wCkA/8ApQb/KqMO/wCk
        B/8ApAX/JKIH/wCkBP8ApAr/U4Y0ZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG3ayOFtmkOqa1k
        CFSKVxQYtWwHuMJyGfVRNiIcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqbanmMvayv/L2sr/y9nK/8va
        y/+KnWu2DowqbpyphNPL2sr/y9rK/8vayv/L2sr/o5h/dwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFg3
        FzarZReBtG0ZmRsAACAAAAADmVoWYntNFlWTXB+BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1MrJhf//
        /////////////+bb2v8dAAANAAAAAGEIAC348vL/////////////////rpeYXwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAJ9cHHeHXi0snl8XeAAAAAIAAAAApWUecb5tDsOuZxWVAAAEAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAg1xXO/r29v///////////+/q6v93HR0eAAAAAIlsa079+vr////////////v6Oj2AAEAEwAA
        AAAAAAAAAAAAAAAAAAAAAAAAUDkkGZ9dHLC/cRG2dFExFgAAAAAAAAAAAAAMC288FBgAAAEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAANHAvrT////////////////o397w3tbUufDq6vX////////////+
        /v/BpaOGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAA/OB0QAAAACwAAAAAAAAAAAAAAAAAA
        AACyaCBPzXIOxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAAA7ay8vM////////////////////////
        /////////fr6/8u3tqYAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOzXUQx3NJJywAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABjQhwdqmYlTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAYHyLe2gOfh
        4eb79vb///38//n08//j19bbtZuabBEAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAFk0AAAAAAAGtGkZf1M+
        KxEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKliEkCsZRmmq2IYTQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAhAAAtdwAAMwAAACYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABp2Embapk
        ENAAAAMNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKdgIYmuZxZkpmYRn5RZ
        H0gGAwERAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        FxGqZBamhFYlaLhoEsKjYR2QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF5I
        SACnZSJexHAR07RnEuK6bR2hjlUkLwAAABMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABe0sYWLBmFYLFbxqxn2Efo088JTMQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAhlYZRqZiFpurZhK8jVAGPbhtFHeyZxWCjFYccZ1eGlhnNQASAAAAAJpf
        DSmaXxM0pmIWTZNbImSwZBikvG0JmL9uC5GXWByetWsYSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOTWiZYvXAUy3JFFk66bBHRc0gbYslz
        D5WsZRaqAAAAAKVeF5mxaBTVt2kcVqpnEE2uZRSWpVsLkplkJUwoFAcOAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwAAD25L
        LDCwaBaIcUglXLlsGKelZBSUAAAAALdrEZ2XXBqmflIhbb1tGooAAAAYAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/4QP/gAAAAP8AAH+AAAAA/gQAP4AAAAD4H/gPgAAAAPg/
        /g+AAAAA4P//h4AAAADh/3/DgAAAAMOAAOGAAAAAhgAAMIAAAACEAAAQgAAAAA4AADgAAAAAD4wQ/AAA
        AAAfGAR8AAAAAB4xRjwAAAAAHmADPAAAAAAcAAAcAAAAABwAABwAAAAAHAACHAAAAAAfwAH8AAAAAB/A
        AfgAAAAAD8AB+AAAAAAPwIH4AAAAAI/AgfCAAAAAn+AD9IAAAADn4APjgAAAAOfwB+OAAAAA+P4/D4AA
        AAD4P/4PgAAAAPwP+B+AAAAA/gCAP4AAAAD/AIB/gAAAAP/Agf+AAAAA
</value>
  </data>
</root>